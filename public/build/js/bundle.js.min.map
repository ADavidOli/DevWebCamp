{"version":3,"sources":["horas.js","ponentes.js","tags.js"],"names":["document","querySelector","categoria","dias","querySelectorAll","inputOcultoDia","inputOcultohora","addEventListener","terminoBusqueda","forEach","dia","busqueda","categoria_id","value","Object","values","includes","buscarEventos","id","horaSeleccionada","e","target","name","horaPrevia","classList","remove","async","url","resultado","fetch","eventos","listadoHoras","li","add","horasTomadas","map","evento","hora_id","listadoHorasArray","Array","from","filter","dataset","horaId","hora","seleccionarHora","obtenerHorasDisponibles","json","console","log","ponentesInput","ponentes","ponentesFiltrados","listadoPonentes","ponenteHidden","seleccionarPonente","ponenteSeleccionado","ponentePrevio","ponenteId","respuesta","array","ponente","nombre","trim","apellido","formatearPonentes","obtenerPonentes","entrada","length","expresion","RegExp","toLowerCase","search","firstChild","removeChild","ponenteHtml","createElement","textContent","onclick","appendChild","noResultados","mostrarPonente","tags_input","tagsDiv","tagsInputHidden","tags","mostrarTags","tag","etiqueta","ondblclick","eliminarTag","actualizarInputHidden","toString","split","evt","keyCode","preventDefault"],"mappings":"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","file":"bundle.js","sourcesContent":["(function () {\n  const horas = document.querySelector(\"#horas\");\n\n  if (horas) {\n    // obteniendo los datos del lado del cliente y llenarlo a un objeto en memoria.\n    const categoria = document.querySelector('[name=\"categoria_id\"]');\n    const dias = document.querySelectorAll('[name=\"dia\"]');\n    const inputOcultoDia = document.querySelector('[name=\"dia_id\"]');\n    const inputOcultohora = document.querySelector('[name=\"hora_id\"]');\n\n    categoria.addEventListener(\"change\", terminoBusqueda);\n    // asi pasamos los valores de un input\n    dias.forEach((dia) => dia.addEventListener(\"change\", terminoBusqueda));\n    // crear un objeto en memori para mandar los datos.\n\n    let busqueda = {\n      categoria_id: +categoria.value || \"\",\n      dia: +inputOcultoDia.value || \"\",\n    };\n\n    if (!Object.values(busqueda).includes(\"\")) {\n      buscarEventos();\n    }\n\n    // resaltar la hora actual.\n    // console.log(inputOcultohora.value);\n    const id = inputOcultohora.value;\n    const horaSeleccionada = document.querySelector(`[data-hora-id=\"${id}\"]`);\n    console.log(horaSeleccionada);\n\n\n    function terminoBusqueda(e) {\n      busqueda[e.target.name] = e.target.value;\n      // reiniciar valores\n      inputOcultohora.value = \"\";\n      inputOcultoDia.value = \"\";\n\n      const horaPrevia = document.querySelector(\".horas__hora--seleccionada\");\n      if (horaPrevia) {\n        horaPrevia.classList.remove(\"horas__hora--seleccionada\");\n      }\n\n      // si al menos uno de estos dos campos dentro del objeto esta vacio se sale\n      if (Object.values(busqueda).includes(\"\")) {\n        return;\n      }\n      buscarEventos();\n    }\n\n    async function buscarEventos() {\n      // **conexcion a una API***\n      const { dia, categoria_id } = busqueda;\n      const url = `/api/eventos-horario?dia_id=${dia}&categoria_id=${categoria_id}`;\n      // verifica si se pudo contectar correctamente\n      const resultado = await fetch(url);\n      // trae de la bd utilizando la conexion de la api en formato json\n      const eventos = await resultado.json();\n      //**fin de la conexion a una API***/\n      obtenerHorasDisponibles(eventos);\n    }\n\n    function obtenerHorasDisponibles(eventos) {\n      // reiniciar las horas\n      const listadoHoras = document.querySelectorAll(\"#horas li\");\n      listadoHoras.forEach((li) =>\n        li.classList.add(\"horas__hora--deshabilitada\")\n      );\n\n      // comprobar los eventos tomados y quitar la variable desahabilitada\n      const horasTomadas = eventos.map((evento) => evento.hora_id);\n      // convertir listadohoras en una arrreglo porque te da un nodelist\n      const listadoHorasArray = Array.from(listadoHoras);\n\n      const resultado = listadoHorasArray.filter(\n        (li) => !horasTomadas.includes(li.dataset.horaId)\n      );\n\n      // listar las horas que no tengan clase.\n      resultado.forEach((li) =>\n        li.classList.remove(\"horas__hora--deshabilitada\")\n      );\n\n      const horasDisponibles = document.querySelectorAll(\n        \"#horas li:not(.horas__hora--deshabilitada)\"\n      );\n\n      horasDisponibles.forEach((hora) =>\n        hora.addEventListener(\"click\", seleccionarHora)\n      );\n    }\n\n    function seleccionarHora(e) {\n      // desahabilitar la hora previa si hay un nuevo click\n      const horaPrevia = document.querySelector(\".horas__hora--seleccionada\");\n      if (horaPrevia) {\n        // si hay una horaprevia entonces se le quita a la ya seleccionada.\n        horaPrevia.classList.remove(\"horas__hora--seleccionada\");\n      }\n      // agregar clase\n      e.target.classList.add(\"horas__hora--seleccionada\");\n      // .dataset lee los valores que tenga los data personalizados  en html\"data-\"\n      inputOcultohora.value = e.target.dataset.horaId;\n\n      //   llenar el campo oculto del día.\n      inputOcultoDia.value = document.querySelector(\n        '[name=\"dia\"]:checked'\n      ).value;\n    }\n  }\n})();\n","(function () {\n  const ponentesInput = document.querySelector(\"#ponentes\");\n  if (ponentesInput) {\n    let ponentes = [];\n    let ponentesFiltrados = [];\n    const listadoPonentes = document.querySelector(\"#Listado-ponentes\");\n    const ponenteHidden = document.querySelector('[name=\"ponente_id\"]');\n\n    obtenerPonentes();\n    ponentesInput.addEventListener(\"input\", buscarPonentes);\n\n    async function obtenerPonentes() {\n      const url = `/api/ponentes`;\n      const respuesta = await fetch(url);\n      const resultado = await respuesta.json();\n      formatearPonentes(resultado);\n    }\n\n    function formatearPonentes(array = []) {\n      ponentes = array.map((ponente) => {\n        return {\n          nombre: `${ponente.nombre.trim()} ${ponente.apellido}`,\n          id: ponente.id,\n        };\n      });\n    }\n\n    function buscarPonentes(e) {\n      const entrada = e.target.value;\n      // si la entrada del input es más de 3 caracteres comienza a buscar\n      if (entrada.length > 3) {\n        // sin importar que sea mayus o minus, que funcione la busqueda.\n        // para ellos utilizar expresiones regulares.\n        const expresion = new RegExp(entrada, \"i\");\n        ponentesFiltrados = ponentes.filter((ponente) => {\n          if (ponente.nombre.toLowerCase().search(expresion) != -1) {\n            return ponente;\n          }\n        });\n      } else {\n        ponentesFiltrados = [];\n      }\n      mostrarPonente();\n    }\n\n    function mostrarPonente() {\n      // limpiamos, cada vez que haya una nueva busqueda\n      while (listadoPonentes.firstChild) {\n        listadoPonentes.removeChild(listadoPonentes.firstChild);\n      }\n      if (ponentesFiltrados.length > 0) {\n        ponentesFiltrados.forEach((ponente) => {\n          const ponenteHtml = document.createElement(\"LI\");\n          ponenteHtml.classList.add(\"Listado-ponentes__ponente\");\n          ponenteHtml.textContent = ponente.nombre;\n          ponenteHtml.dataset.ponenteId = ponente.id;\n          ponenteHtml.onclick = seleccionarPonente;\n          // añadir al dom.\n          listadoPonentes.appendChild(ponenteHtml);\n\n        });\n      } else {\n        const noResultados = document.createElement(\"P\");\n        noResultados.classList.add('listado-ponente__noresultado');\n        noResultados.textContent = `no hay resultados`;\n        listadoPonentes.appendChild(noResultados);\n\n      }\n    }\n\n    function seleccionarPonente(e){\n      const ponenteSeleccionado = e.target;\n      // remover la clas previa.\n      const ponentePrevio = document.querySelector('.Listado-ponentes__ponente--seleccionado');\n      if(ponentePrevio){\n        ponentePrevio.classList.remove('Listado-ponentes__ponente--seleccionado');\n      }\n      ponenteSeleccionado.classList.add('Listado-ponentes__ponente--seleccionado');\n      ponenteHidden.value = ponenteSeleccionado.dataset.ponenteId;\n      \n    }\n  }\n})();\n","(function () {\n  const tags_input = document.querySelector('#tags_input');\n  if (tags_input) {\n    const tagsDiv = document.querySelector('#tags');\n    const tagsInputHidden = document.querySelector('[name=\"tags\"]');\n\n    let tags = [];\n\n    // recuperar el input oculto.\n    if(tagsInputHidden.value !==''){\n      tags = tagsInputHidden.value.split(',');\n      mostrarTags();\n    }\n\n\n\n    // escuchar los cambios en el input.\n    tags_input.addEventListener(\"keypress\", guardartag);\n    function guardartag(evt) {\n      if (evt.keyCode === 44) {\n        if (evt.target.value.trim() === \"\" || evt.target.value < 1) {\n          return;\n        }\n        evt.preventDefault();\n        tags = [...tags, evt.target.value.trim()]; // esto nos va arrojando lo que pone el usuario despues de la coma\n        tags_input.value = \"\"; //limpiamos el input\n        mostrarTags();\n      }\n    }\n\n    function mostrarTags() {\n        tagsDiv.textContent = '';\n        // empezamos a iterar la etiquetas para agregar al html\n        tags.forEach(tag=>{\n              const etiqueta = document.createElement('LI');\n              etiqueta.classList.add('formulario__tag');\n              etiqueta.textContent = tag;\n              etiqueta.ondblclick = eliminarTag;\n              tagsDiv.appendChild(etiqueta);\n        });\n        actualizarInputHidden();\n    }\n    function actualizarInputHidden(){\n        tagsInputHidden.value = tags.toString();\n    }\n\n    function eliminarTag(e){\n        // eliminamos en memoria con el target presionado\n        e.target.remove();\n        //filtramos sobre el mismo arreglo de tags\n        tags = tags.filter(tag=>tag !== e.target.textContent);\n        // actualizamos nuestro hidden.\n        actualizarInputHidden();\n    }\n    //aqui acaba el if, si es que hay un id, de tags_input\n  }\n})();\n"]}